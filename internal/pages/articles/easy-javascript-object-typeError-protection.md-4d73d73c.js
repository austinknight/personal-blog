import{S as As,i as Hs,s as Ms,D as ls,x as Ns,y as Rs,z as $s,A as Ws,B as ys,r as Cs,p as Fs,C as Os,O as ms,e as p,t as i,k as h,c as r,a as l,h as u,d as a,m as k,b as g,g as t,I as c,n as Ss}from"../../chunks/index-bd948dec.js";import{P as zs}from"../../chunks/_post-3091f67d.js";import"../../chunks/index-70edd345.js";function Us(A){let n,y,m,f,o=`<code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Rod Kimble'</span><span class="token punctuation">,</span>
	<span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'Hotrod'</span><span class="token punctuation">,</span>
	<span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">'rodk@email.com'</span><span class="token punctuation">,</span>
	<span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">street</span><span class="token operator">:</span> <span class="token string">'Kulas Light'</span><span class="token punctuation">,</span>
		<span class="token literal-property property">suite</span><span class="token operator">:</span> <span class="token string">'Apt. 556'</span><span class="token punctuation">,</span>
		<span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">'Gwenborough'</span><span class="token punctuation">,</span>
		<span class="token literal-property property">zipcode</span><span class="token operator">:</span> <span class="token string">'92998-3874'</span><span class="token punctuation">,</span>
		<span class="token literal-property property">geo</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
			<span class="token literal-property property">lat</span><span class="token operator">:</span> <span class="token string">'-37.3159'</span><span class="token punctuation">,</span>
			<span class="token literal-property property">lng</span><span class="token operator">:</span> <span class="token string">'81.1496'</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token string">'1-770-736-8031 x56442'</span><span class="token punctuation">,</span>
	<span class="token literal-property property">website</span><span class="token operator">:</span> <span class="token string">'hildegard.org'</span><span class="token punctuation">,</span>
	<span class="token literal-property property">company</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Romaguera-Crona'</span><span class="token punctuation">,</span>
		<span class="token literal-property property">catchPhrase</span><span class="token operator">:</span> <span class="token string">'Multi-layered client-server neural-net'</span><span class="token punctuation">,</span>
		<span class="token literal-property property">bs</span><span class="token operator">:</span> <span class="token string">'harness real-time e-markets'</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,d,b,Y,$,j,bs=`<code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
<span class="token comment">// => 1</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>address<span class="token punctuation">)</span>
<span class="token comment">// => &#123;</span>
        <span class="token literal-property property">street</span><span class="token operator">:</span> <span class="token string">'Kulas Light'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">suite</span><span class="token operator">:</span> <span class="token string">'Apt. 556'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">'Gwenborough'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">zipcode</span><span class="token operator">:</span> <span class="token string">'92998-3874'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">geo</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">lat</span><span class="token operator">:</span> <span class="token string">'-37.3159'</span><span class="token punctuation">,</span>
          lng"<span class="token operator">:</span> <span class="token string">'81.1496'</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>company<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token comment">// => 'Romaguera-Crona'</span></code>`,W,H,Z,C,x,ws=`<code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>birthdate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// => undefined</span></code>`,F,w,Q,R,V,X,O,E,vs=`<code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>birthdate<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// => Uncaught TypeError: Cannot read property 'month' of undefined</span></code>`,S,M,ss,z,N,as,U,I,_s=`<code class="language-javascript"><span class="token comment">// Our default date</span>
<span class="token keyword">let</span> bday <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>birthday<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// do some stuff with user.birthday because we know it's got a value if we get into the if block.</span>
	bday <span class="token operator">=</span> user<span class="token punctuation">.</span>birthday<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>birthday <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>birthday<span class="token punctuation">.</span>month<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// We get into this block if the user has a birthday, AND, if the user's birthday has a month property with a value.</span>
	bday<span class="token punctuation">.</span>month <span class="token operator">=</span> user<span class="token punctuation">.</span>birthday<span class="token punctuation">.</span>month<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,G,v,es,L,ts,ns,q,P,js=`<code class="language-javascript"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">'lodash'</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> bday <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// Same as &#96;user.birthday&#96;</span>
bday <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">'birthday'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Same as &#96;user.birthday.month&#96;</span>
bday<span class="token punctuation">.</span>month <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">'birthday.month'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,B,_,os,T,ps,rs;return{c(){n=p("p"),y=i("If you are writing javascript, it\u2019s safe to say you are working with objects on a regular basis (not to mention the fact that objects are a huge part of how javascript works, and javascript\u2019s primitives like arrays, string, booleans, etc. get wrapped in objects when you call specific methods on them). Usually when I\u2019m working with an object, it\u2019s because I am handling data of some kind, like a local state object or a JSON object returned from an API call. When accessing objects, properties may be one, two, three or more levels deep in the structure. Here is an example object we\u2019ll use for reference:"),m=h(),f=p("pre"),d=h(),b=p("p"),Y=i("To access any property of this user object, you could simply do things like:"),$=h(),j=p("pre"),W=h(),H=p("p"),Z=i("What happens when you try to access a property on the object that doesn\u2019t exist?"),C=h(),x=p("pre"),F=h(),w=p("p"),Q=i("Nothing too terrible right? If the property doesn\u2019t exist on the object, "),R=p("code"),V=i("undefined"),X=i(" will be returned as the value. Now what happens if you try to access a property two, three, or more levels deep, where both levels don\u2019t exist?"),O=h(),E=p("pre"),S=h(),M=p("p"),ss=i("Bad things happen, horrible things, things you don\u2019t want to see! The severity of what happens varies greatly depending on the context of where the attempt to access the property is happening. This type of error can be pretty bad because it often leads to infinite loops, frozen apps, bad data, or just silent failures that lead to who knows what down the line. There are some things we can do though to protect ourselves against nasty bugs like this. You may find it redundant or an unnecessary to add an extra step, but you\u2019re really going to save yourself some time and headache in the long run by being proactive about accessing object properties safely."),z=h(),N=p("p"),as=i("A tried and true method for accessing nested object properties safely is to simply check for the existence of a property before trying to do anything with it. For example, you could use a simple if statement:"),U=h(),I=p("pre"),G=h(),v=p("p"),es=i("Great, now we\u2019re accessing properties in a safe way. Using this method is perfectly fine, but as you can see it can quickly get out of hand when you add more and more checks. The if statements will continue to grow and you\u2019re going to spend an unnecessary amount of time parsing through the block trying to figure things out. A more developer-friendly method I have become accustomed to is to use some handy tools created by the folks maintaining "),L=p("a"),ts=i("Lodash"),ns=i(". Aside from some convenient utility functions for accessing object properties, there is a whole host of other useful functionality Lodash provides for working with various javascript data structures. I\u2019ll leave you to explore what else Lodash has to offer, but for the purposes of this article, we\u2019re going to look specifically at the get method. Let\u2019s look at the user birthday example again using this approach:"),q=h(),P=p("pre"),B=h(),_=p("p"),os=i("First, we\u2019re importing Lodash from NPM. We can access the different methods of Lodash by using the_ character. In the get method, the first argument is the object you want to access, the second argument is a string of the path you want to access, and the third argument is a default value to return. The default value you set in the third argument will be returned if Lodash is unsuccessful in finding a value at the path you\u2019ve given. If you do not set a default value like the last line in our example, that is ok too because get will return undefined for you by default. For more examples, see the documentation at "),T=p("a"),ps=i("https://lodash.com/docs/4.17.4#get"),rs=i(". As a general rule of thumb, I will use Lodash get when I need to access a property in an object that is more than one level deep. It can be useful to use get when searching the first level if you want to return a default value that is something other than undefined though."),this.h()},l(s){n=r(s,"P",{});var e=l(n);y=u(e,"If you are writing javascript, it\u2019s safe to say you are working with objects on a regular basis (not to mention the fact that objects are a huge part of how javascript works, and javascript\u2019s primitives like arrays, string, booleans, etc. get wrapped in objects when you call specific methods on them). Usually when I\u2019m working with an object, it\u2019s because I am handling data of some kind, like a local state object or a JSON object returned from an API call. When accessing objects, properties may be one, two, three or more levels deep in the structure. Here is an example object we\u2019ll use for reference:"),e.forEach(a),m=k(s),f=r(s,"PRE",{class:!0});var xs=l(f);xs.forEach(a),d=k(s),b=r(s,"P",{});var cs=l(b);Y=u(cs,"To access any property of this user object, you could simply do things like:"),cs.forEach(a),$=k(s),j=r(s,"PRE",{class:!0});var Es=l(j);Es.forEach(a),W=k(s),H=r(s,"P",{});var is=l(H);Z=u(is,"What happens when you try to access a property on the object that doesn\u2019t exist?"),is.forEach(a),C=k(s),x=r(s,"PRE",{class:!0});var Is=l(x);Is.forEach(a),F=k(s),w=r(s,"P",{});var D=l(w);Q=u(D,"Nothing too terrible right? If the property doesn\u2019t exist on the object, "),R=r(D,"CODE",{});var us=l(R);V=u(us,"undefined"),us.forEach(a),X=u(D," will be returned as the value. Now what happens if you try to access a property two, three, or more levels deep, where both levels don\u2019t exist?"),D.forEach(a),O=k(s),E=r(s,"PRE",{class:!0});var Ls=l(E);Ls.forEach(a),S=k(s),M=r(s,"P",{});var hs=l(M);ss=u(hs,"Bad things happen, horrible things, things you don\u2019t want to see! The severity of what happens varies greatly depending on the context of where the attempt to access the property is happening. This type of error can be pretty bad because it often leads to infinite loops, frozen apps, bad data, or just silent failures that lead to who knows what down the line. There are some things we can do though to protect ourselves against nasty bugs like this. You may find it redundant or an unnecessary to add an extra step, but you\u2019re really going to save yourself some time and headache in the long run by being proactive about accessing object properties safely."),hs.forEach(a),z=k(s),N=r(s,"P",{});var ks=l(N);as=u(ks,"A tried and true method for accessing nested object properties safely is to simply check for the existence of a property before trying to do anything with it. For example, you could use a simple if statement:"),ks.forEach(a),U=k(s),I=r(s,"PRE",{class:!0});var Ps=l(I);Ps.forEach(a),G=k(s),v=r(s,"P",{});var J=l(v);es=u(J,"Great, now we\u2019re accessing properties in a safe way. Using this method is perfectly fine, but as you can see it can quickly get out of hand when you add more and more checks. The if statements will continue to grow and you\u2019re going to spend an unnecessary amount of time parsing through the block trying to figure things out. A more developer-friendly method I have become accustomed to is to use some handy tools created by the folks maintaining "),L=r(J,"A",{href:!0,rel:!0});var ds=l(L);ts=u(ds,"Lodash"),ds.forEach(a),ns=u(J,". Aside from some convenient utility functions for accessing object properties, there is a whole host of other useful functionality Lodash provides for working with various javascript data structures. I\u2019ll leave you to explore what else Lodash has to offer, but for the purposes of this article, we\u2019re going to look specifically at the get method. Let\u2019s look at the user birthday example again using this approach:"),J.forEach(a),q=k(s),P=r(s,"PRE",{class:!0});var Ts=l(P);Ts.forEach(a),B=k(s),_=r(s,"P",{});var K=l(_);os=u(K,"First, we\u2019re importing Lodash from NPM. We can access the different methods of Lodash by using the_ character. In the get method, the first argument is the object you want to access, the second argument is a string of the path you want to access, and the third argument is a default value to return. The default value you set in the third argument will be returned if Lodash is unsuccessful in finding a value at the path you\u2019ve given. If you do not set a default value like the last line in our example, that is ok too because get will return undefined for you by default. For more examples, see the documentation at "),T=r(K,"A",{href:!0,rel:!0});var fs=l(T);ps=u(fs,"https://lodash.com/docs/4.17.4#get"),fs.forEach(a),rs=u(K,". As a general rule of thumb, I will use Lodash get when I need to access a property in an object that is more than one level deep. It can be useful to use get when searching the first level if you want to return a default value that is something other than undefined though."),K.forEach(a),this.h()},h(){g(f,"class","language-javascript"),g(j,"class","language-javascript"),g(x,"class","language-javascript"),g(E,"class","language-javascript"),g(I,"class","language-javascript"),g(L,"href","https://lodash.com/"),g(L,"rel","nofollow"),g(P,"class","language-javascript"),g(T,"href","https://lodash.com/docs/4.17.4#get"),g(T,"rel","nofollow")},m(s,e){t(s,n,e),c(n,y),t(s,m,e),t(s,f,e),f.innerHTML=o,t(s,d,e),t(s,b,e),c(b,Y),t(s,$,e),t(s,j,e),j.innerHTML=bs,t(s,W,e),t(s,H,e),c(H,Z),t(s,C,e),t(s,x,e),x.innerHTML=ws,t(s,F,e),t(s,w,e),c(w,Q),c(w,R),c(R,V),c(w,X),t(s,O,e),t(s,E,e),E.innerHTML=vs,t(s,S,e),t(s,M,e),c(M,ss),t(s,z,e),t(s,N,e),c(N,as),t(s,U,e),t(s,I,e),I.innerHTML=_s,t(s,G,e),t(s,v,e),c(v,es),c(v,L),c(L,ts),c(v,ns),t(s,q,e),t(s,P,e),P.innerHTML=js,t(s,B,e),t(s,_,e),c(_,os),c(_,T),c(T,ps),c(_,rs)},p:Ss,d(s){s&&a(n),s&&a(m),s&&a(f),s&&a(d),s&&a(b),s&&a($),s&&a(j),s&&a(W),s&&a(H),s&&a(C),s&&a(x),s&&a(F),s&&a(w),s&&a(O),s&&a(E),s&&a(S),s&&a(M),s&&a(z),s&&a(N),s&&a(U),s&&a(I),s&&a(G),s&&a(v),s&&a(q),s&&a(P),s&&a(B),s&&a(_)}}}function Gs(A){let n,y;const m=[A[0],gs];let f={$$slots:{default:[Us]},$$scope:{ctx:A}};for(let o=0;o<m.length;o+=1)f=ls(f,m[o]);return n=new zs({props:f}),{c(){Ns(n.$$.fragment)},l(o){Rs(n.$$.fragment,o)},m(o,d){$s(n,o,d),y=!0},p(o,[d]){const b=d&1?Ws(m,[d&1&&ys(o[0]),d&0&&ys(gs)]):{};d&2&&(b.$$scope={dirty:d,ctx:o}),n.$set(b)},i(o){y||(Cs(n.$$.fragment,o),y=!0)},o(o){Fs(n.$$.fragment,o),y=!1},d(o){Os(n,o)}}}const gs={title:"Easy Javascript Object TypeError Protection",preview:"Preventing errors with the help of Lodash",date:"2017-10-12T00:00:00.000Z",categories:["javascript"],tags:["how-to"]};function qs(A,n,y){return A.$$set=m=>{y(0,n=ls(ls({},n),ms(m)))},n=ms(n),[n]}class Ks extends As{constructor(n){super(),Hs(this,n,qs,Gs,Ms,{})}}export{Ks as default,gs as metadata};
